// <auto-generated />
using System;
using KoiDeliv.DataAccess.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KoiDeliv.DataAccess.Migrations
{
    [DbContext(typeof(KoiDeliveryDBContext))]
    partial class KoiDeliveryDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.33")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("KoiDeliv.DataAccess.Models.Blog", b =>
                {
                    b.Property<int>("BlogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BlogID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BlogId"), 1L, 1);

                    b.Property<int?>("AuthorId")
                        .HasColumnType("int")
                        .HasColumnName("AuthorID");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ImagePath")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("PriceListId")
                        .HasColumnType("int")
                        .HasColumnName("PriceListID");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("BlogId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("PriceListId");

                    b.ToTable("Blogs");
                });

            modelBuilder.Entity("KoiDeliv.DataAccess.Models.CustomerProfile", b =>
                {
                    b.Property<int>("ProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProfileID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProfileId"), 1L, 1);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<DateTime?>("LastOrderDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("TotalOrders")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<decimal?>("TotalSpent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,0)")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("ProfileId")
                        .HasName("PK__Customer__290C8884D738E605");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerProfiles");
                });

            modelBuilder.Entity("KoiDeliv.DataAccess.Models.Gsp", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<int>("Freg")
                        .HasColumnType("int")
                        .HasColumnName("freg");

                    b.Property<int>("Index")
                        .HasColumnType("int")
                        .HasColumnName("index");

                    b.Property<bool>("Label")
                        .HasColumnType("bit")
                        .HasColumnName("label");

                    b.Property<string>("PEnd")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("pEnd");

                    b.Property<string>("PStart")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("pStart");

                    b.Property<string>("PTerm")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("pTerm");

                    b.Property<string>("PreRouted")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("preRouted");

                    b.Property<string>("Regions")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("regions");

                    b.Property<string>("VehicleId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("vehicleID");

                    b.HasKey("Id");

                    b.ToTable("GSP", (string)null);
                });

            modelBuilder.Entity("KoiDeliv.DataAccess.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"), 1L, 1);

                    b.Property<string>("AdditionalServices")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<DateTime?>("DateShip")
                        .HasColumnType("datetime");

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FishType")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("NameUserGet")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Origin")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneContact")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("ShippingMethod")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValueSql("('Pending')");

                    b.Property<decimal?>("TotalPrice")
                        .HasColumnType("decimal(13,0)");

                    b.Property<int>("TotalQuantity")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalWeight")
                        .HasColumnType("decimal(18,0)");

                    b.HasKey("OrderId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("KoiDeliv.DataAccess.Models.PriceList", b =>
                {
                    b.Property<int>("PriceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PriceID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PriceId"), 1L, 1);

                    b.Property<decimal?>("AdditionalServicePrice")
                        .HasColumnType("decimal(18,0)");

                    b.Property<decimal>("BasePrice")
                        .HasColumnType("decimal(18,0)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("WeightRange")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PriceId")
                        .HasName("PK__PriceLis__4957584F8015DBAE");

                    b.ToTable("PriceList", (string)null);
                });

            modelBuilder.Entity("KoiDeliv.DataAccess.Models.RatingsFeedback", b =>
                {
                    b.Property<int>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FeedbackID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeedbackId"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Feedback")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    b.Property<int?>("Rating")
                        .HasColumnType("int");

                    b.HasKey("FeedbackId")
                        .HasName("PK__RatingsF__6A4BEDF667F8AC4A");

                    b.HasIndex("OrderId");

                    b.ToTable("RatingsFeedbacks");
                });

            modelBuilder.Entity("KoiDeliv.DataAccess.Models.Route", b =>
                {
                    b.Property<int>("RoutedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RoutedID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoutedId"), 1L, 1);

                    b.Property<string>("Adress")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("DateSetting")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DateUpdate")
                        .HasColumnType("date");

                    b.Property<double?>("DestinationLatitude")
                        .HasColumnType("float")
                        .HasColumnName("destinationLatitude");

                    b.Property<double?>("DestinationLongitude")
                        .HasColumnType("float")
                        .HasColumnName("destinationLongitude");

                    b.Property<double?>("Distance")
                        .HasColumnType("float");

                    b.Property<string>("Notice")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(13,0)");

                    b.Property<int?>("ShipmentId")
                        .HasColumnType("int")
                        .HasColumnName("ShipmentID");

                    b.Property<double?>("SourceLatitude")
                        .HasColumnType("float")
                        .HasColumnName("sourceLatitude");

                    b.Property<double?>("SourceLongitude")
                        .HasColumnType("float")
                        .HasColumnName("sourceLongitude");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.HasKey("RoutedId");

                    b.HasIndex("ShipmentId");

                    b.ToTable("Route", (string)null);
                });

            modelBuilder.Entity("KoiDeliv.DataAccess.Models.Shipment", b =>
                {
                    b.Property<int>("ShipmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ShipmentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShipmentId"), 1L, 1);

                    b.Property<string>("CertificateIssued")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("DeliveringStaffId")
                        .HasColumnType("int")
                        .HasColumnName("DeliveringStaffID");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ForeignImportStatus")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("HealthCheckStatus")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    b.Property<string>("PackingStatus")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("SalesStaffId")
                        .HasColumnType("int")
                        .HasColumnName("SalesStaffID");

                    b.Property<string>("ShippingStatus")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValueSql("('In-Progress')");

                    b.Property<decimal?>("TotalPrice")
                        .HasColumnType("decimal(13,0)");

                    b.HasKey("ShipmentId");

                    b.HasIndex("DeliveringStaffId");

                    b.HasIndex("OrderId");

                    b.HasIndex("SalesStaffId");

                    b.ToTable("Shipments");
                });

            modelBuilder.Entity("KoiDeliv.DataAccess.Models.Transaction", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PaymentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"), 1L, 1);

                    b.Property<string>("BankCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankTranNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    b.Property<DateTime?>("PayDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("PaymentAccount")
                        .HasColumnType("int");

                    b.Property<string>("PaymentInfor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TransactionNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TransasctionStatus")
                        .HasColumnType("int");

                    b.HasKey("PaymentId")
                        .HasName("PK_Payment");

                    b.HasIndex("OrderId");

                    b.ToTable("Transaction", (string)null);
                });

            modelBuilder.Entity("KoiDeliv.DataAccess.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserId");

                    b.HasIndex(new[] { "Email" }, "UQ__Users__A9D10534D2ED00FB")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("KoiDeliv.DataAccess.Models.Blog", b =>
                {
                    b.HasOne("KoiDeliv.DataAccess.Models.User", "Author")
                        .WithMany("Blogs")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK__Blogs__AuthorID__75A278F5");

                    b.HasOne("KoiDeliv.DataAccess.Models.PriceList", "PriceList")
                        .WithMany("Blogs")
                        .HasForeignKey("PriceListId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK__Blogs__PriceList__76969D2E");

                    b.Navigation("Author");

                    b.Navigation("PriceList");
                });

            modelBuilder.Entity("KoiDeliv.DataAccess.Models.CustomerProfile", b =>
                {
                    b.HasOne("KoiDeliv.DataAccess.Models.User", "Customer")
                        .WithMany("CustomerProfiles")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__CustomerP__Custo__778AC167");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("KoiDeliv.DataAccess.Models.Order", b =>
                {
                    b.HasOne("KoiDeliv.DataAccess.Models.User", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Orders__Customer__787EE5A0");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("KoiDeliv.DataAccess.Models.RatingsFeedback", b =>
                {
                    b.HasOne("KoiDeliv.DataAccess.Models.Order", "Order")
                        .WithMany("RatingsFeedbacks")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__RatingsFe__Order__797309D9");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("KoiDeliv.DataAccess.Models.Route", b =>
                {
                    b.HasOne("KoiDeliv.DataAccess.Models.Shipment", "Shipment")
                        .WithMany("Routes")
                        .HasForeignKey("ShipmentId")
                        .HasConstraintName("FK_Route_Shipments");

                    b.Navigation("Shipment");
                });

            modelBuilder.Entity("KoiDeliv.DataAccess.Models.Shipment", b =>
                {
                    b.HasOne("KoiDeliv.DataAccess.Models.User", "DeliveringStaff")
                        .WithMany("ShipmentDeliveringStaffs")
                        .HasForeignKey("DeliveringStaffId")
                        .HasConstraintName("FK__Shipments__Deliv__7B5B524B");

                    b.HasOne("KoiDeliv.DataAccess.Models.Order", "Order")
                        .WithMany("Shipments")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Shipments__Order__7C4F7684");

                    b.HasOne("KoiDeliv.DataAccess.Models.User", "SalesStaff")
                        .WithMany("ShipmentSalesStaffs")
                        .HasForeignKey("SalesStaffId")
                        .HasConstraintName("FK__Shipments__Sales__7D439ABD");

                    b.Navigation("DeliveringStaff");

                    b.Navigation("Order");

                    b.Navigation("SalesStaff");
                });

            modelBuilder.Entity("KoiDeliv.DataAccess.Models.Transaction", b =>
                {
                    b.HasOne("KoiDeliv.DataAccess.Models.Order", "Order")
                        .WithMany("Transactions")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_Transaction_Orders");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("KoiDeliv.DataAccess.Models.Order", b =>
                {
                    b.Navigation("RatingsFeedbacks");

                    b.Navigation("Shipments");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("KoiDeliv.DataAccess.Models.PriceList", b =>
                {
                    b.Navigation("Blogs");
                });

            modelBuilder.Entity("KoiDeliv.DataAccess.Models.Shipment", b =>
                {
                    b.Navigation("Routes");
                });

            modelBuilder.Entity("KoiDeliv.DataAccess.Models.User", b =>
                {
                    b.Navigation("Blogs");

                    b.Navigation("CustomerProfiles");

                    b.Navigation("Orders");

                    b.Navigation("ShipmentDeliveringStaffs");

                    b.Navigation("ShipmentSalesStaffs");
                });
#pragma warning restore 612, 618
        }
    }
}
